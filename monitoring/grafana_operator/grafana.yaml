---
- name: Install Prometheus Operator from OperatorHub.io
  hosts: localhost
  become: no

  vars_files:
    - ../../vars.yaml

  vars:
    namespace: "{{ vars.all.vars.grafana.namespace }}"
    loadBalancerIP: "{{ vars.all.vars.grafana.loadBalancerIP }}"
    password: "{{ vars.all.vars.grafana.password }}"
  tasks:
    - name: Check if OLM is already installed
      kubernetes.core.k8s_info:
        api_version: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        name: "clusterserviceversions.operators.coreos.com"
      register: olm_check
      ignore_errors: yes

    - name: Install Operator Lifecycle Manager (OLM) if not present
      shell: |
        curl -sL https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.26.0/install.sh | bash -s v0.26.0
      args:
        executable: /bin/bash
      when: olm_check.resources | length == 0

    - name: Create Namespace for Prometheus Operator
      kubernetes.core.k8s:
        name: "{{ namespace }}"
        api_version: v1
        kind: Namespace
        state: present

    - name: Apply Grafana Operator manifest
      shell: kubectl apply -f https://operatorhub.io/install/grafana-operator.yaml

    - name: Deploy Grafana Instance
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: grafana.integreatly.org/v1beta1
          kind: Grafana
          metadata:
            name: grafana
            namespace: "{{ namespace }}"
            labels:
              dashboards: "grafana"
          spec:
            persistentVolumeClaim:
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 10Gi
            config:
              log:
                mode: "console"
              auth:
                disable_login_form: "false"
              security:
                admin_user: admin
                admin_password: "{{ password }}"
            deployment:
              spec:
                template:
                  spec:
                    containers:
                      - name: grafana
                        image: grafana/grafana:11.2.2
                        securityContext:
                          allowPrivilegeEscalation: true
                          readOnlyRootFilesystem: false
                        readinessProbe:
                          failureThreshold: 3
                    volumes:
                      - name: grafana-data
                        persistentVolumeClaim:
                          claimName: grafana-pvc
    - name: Ensure /other_hdd/grafana directory exists
      ansible.builtin.file:
        path: /other_hdd/grafana
        state: directory
        mode: '0755'
    - name: Create Persistent Volume
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: grafana-pv
            namespace: "{{ namespace }}"
          spec:
            capacity:
              storage: 10Gi
            volumeMode: Filesystem
            accessModes:
              - ReadWriteOnce
            persistentVolumeReclaimPolicy: Recycle
            local:
              path: /other_hdd/grafana
            nodeAffinity:
              required:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/hostname
                        operator: In
                        values:
                          - "racoon"
    - name: Deploy Grafana Instance
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: grafana.integreatly.org/v1beta1
          kind: GrafanaDashboard
          metadata:
            name: grafanadashboard
            namespace: "{{ namespace }}"
          spec:
            resyncPeriod: 30s
            instanceSelector:
              matchLabels:
                dashboards: "grafana"
            json: >
              {
                "id": null,
                "title": "Simple Dashboard",
                "tags": [],
                "style": "dark",
                "timezone": "browser",
                "editable": true,
                "hideControls": false,
                "graphTooltip": 1,
                "panels": [],
                "time": {
                  "from": "now-6h",
                  "to": "now"
                },
                "timepicker": {
                  "time_options": [],
                  "refresh_intervals": []
                },
                "templating": {
                  "list": []
                },
                "annotations": {
                  "list": []
                },
                "refresh": "5s",
                "schemaVersion": 17,
                "version": 0,
                "links": []
              }
    - name: Deploy Grafana MetaLB
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: grafana-metal-lb
            namespace: "{{ namespace }}"
          spec:
            selector:
              app: grafana
            ports:
              - protocol: TCP
                port: 3000
                targetPort: 3000
            type: LoadBalancer
            loadBalancerIP: 192.168.0.15
# TODO Should be fixed. Currently return error
#"Failed to find exact match for grafana.integreatly.org/v1beta1.GrafanaDataSource by [kind, name, singularName, shortNames]
#    - name: Create Prometheus DataSource for Grafana
#      kubernetes.core.k8s:
#        state: present
#        definition:
#          apiVersion: grafana.integreatly.org/v1beta1
#          kind: GrafanaDataSource
#          metadata:
#            name: grafana-datasource
#            namespace: "{{ namespace }}"
#          spec:
#            instanceSelector:
#              matchLabels:
#                dashboards: "grafanadashboard"
#            datasource:
#              name: prometheus
#              type: prometheus
#              access: proxy
#              url: http://prometheus-operated.{{ namespace }}.svc:9090
#              isDefault: true
#              jsonData:
#                "tlsSkipVerify": true
#                "timeInterval": "5s"
#              editable: true