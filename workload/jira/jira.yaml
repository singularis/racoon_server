---
- name: Install Jira Helm Chart
  hosts: localhost
  gather_facts: false

  vars_files:
    - ../../vars.yaml

  vars:
    helm_chart_repo: atlassian
    helm_chart_repo_url: https://atlassian.github.io/data-center-helm-charts
    helm_chart_ref: atlassian/jira
    helm_chart_release_name: jira
    helm_chart_namespace: "{{ vars.all.vars.jira.namespace }}"

  tasks:
    - name: Print imported variables
      ansible.builtin.debug:
        var: vars.all.vars.jira

    - name: Create namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ helm_chart_namespace }}"
        state: present

    - name: Add Helm chart repository
      community.kubernetes.helm_repository:
        name: "{{ helm_chart_repo }}"
        repo_url: "{{ helm_chart_repo_url }}"

    - name: Create local directory for Jira
      ansible.builtin.file:
        path: /other_hdd/jira
        state: directory
        mode: '0777'

    - name: Create a PersistentVolume for Jira
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: jira-data
          spec:
            capacity:
              storage: "{{ vars.all.vars.jira.volume_size }}"
            volumeMode: Filesystem
            accessModes:
              - ReadWriteOnce
            persistentVolumeReclaimPolicy: Delete
            local:
              path: /other_hdd/jira
            nodeAffinity:
              required:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/hostname
                        operator: In
                        values:
                          - "racoon"

    - name: Create a PersistentVolumeClaim for Jira
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: jira-data-claim
            namespace: "{{ helm_chart_namespace }}"
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: "{{ vars.all.vars.jira.volume_size }}"

    - name: Wait for PVC to be bound
      kubernetes.core.k8s_info:
        kind: PersistentVolumeClaim
        name: jira-data-claim
        namespace: "{{ helm_chart_namespace }}"
      register: pvc_status
      until: pvc_status.resources[0].status.phase == 'Bound'
      retries: 12
      delay: 5

    - name: Create local directory for PostgreSQL
      ansible.builtin.file:
        path: /other_hdd/jira_postgres
        state: directory
        mode: '0777'

    - name: Create PostgreSQL PersistentVolume
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: postgres-data
          spec:
            capacity:
              storage: 10Gi
            volumeMode: Filesystem
            accessModes:
              - ReadWriteOnce
            persistentVolumeReclaimPolicy: Delete
            local:
              path: /other_hdd/jira_postgres
            nodeAffinity:
              required:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/hostname
                        operator: In
                        values:
                          - "racoon"

    - name: Create PostgreSQL database for Jira
      kubernetes.core.k8s:
        state: present
        namespace: "{{ helm_chart_namespace }}"
        definition:
          apiVersion: "acid.zalan.do/v1"
          kind: postgresql
          metadata:
            name: jira-db
            labels:
              team: jira
          spec:
            teamId: "jira"
            postgresql:
              version: "13"
            numberOfInstances: 1
            maintenanceWindows: []
            volume:
              size: 10Gi
            users:
              jira: []
            databases:
              jira: jira
            allowedSourceRanges:
              - 0.0.0.0/32
            resources:
              requests:
                cpu: "100m"
                memory: "100Mi"
              limits:
                cpu: "500m"
                memory: "500Mi"

    - name: Create database credentials secret
      kubernetes.core.k8s:
        state: present
        namespace: "{{ helm_chart_namespace }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: jira-db-credentials
          type: Opaque
          stringData:
            username: "{{ vars.all.vars.jira.db_user }}"
            password: "{{ vars.all.vars.jira.db_password }}"

    - name: Create LoadBalancer service for Jira
      kubernetes.core.k8s:
        state: present
        namespace: "{{ helm_chart_namespace }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: jira-lb
            labels:
              app.kubernetes.io/instance: jira
              app.kubernetes.io/name: jira
          spec:
            type: LoadBalancer
            loadBalancerIP: "{{ vars.all.vars.jira.loadBalancerIP }}"
            ports:
              - name: http
                port: 80
                targetPort: http
                protocol: TCP
            selector:
              app.kubernetes.io/instance: jira
              app.kubernetes.io/name: jira

    - name: Install Jira Helm chart
      community.kubernetes.helm:
        name: "{{ helm_chart_release_name }}"
        chart_ref: "{{ helm_chart_ref }}"
        namespace: "{{ helm_chart_namespace }}"
        state: present
        wait: true
        release_values:
          replicaCount: 1
          ingress:
            create: false
          service:
            type: ClusterIP
            port: 80
          jira:
            adminUser: "{{ vars.all.vars.jira.admin_username }}"
            adminPassword: "{{ vars.all.vars.jira.admin_password }}"
            resources:
              requests:
                cpu: "1000m"
                memory: "2Gi"
              limits:
                cpu: "2000m"
                memory: "4Gi"
          database:
            type: postgres72
            url: "jdbc:postgresql://jira-db.{{ helm_chart_namespace }}.svc.cluster.local:5432/jira"
            driver: "org.postgresql.Driver"
            credentials:
              secretName: jira-db-credentials
            properties:
              socketTimeout: 30
              connectTimeout: 30
              tcpKeepAlive: true
          persistence:
            enabled: true
            existingClaim: jira-data-claim
            storageClass: local-storage
          installPlugins:
            - kubernetes
            - workflow-aggregator
            - git
            - configuration-as-code